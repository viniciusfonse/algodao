scale_color_manual(values = cores_fill) +
scale_fill_manual(values = cores_fill) +
labs(
title = "Efeito da desfolha sobre o número de nós por estádio fenológico",
x = "Desfolha (%)",
y = "Número de nós",
color = "Estádio",
fill = "Estádio"
) +
theme_minimal()
# Garantir que 'stage' é fator com os mesmos níveis do vetor de cores
dat$stage <- factor(dat$stage, levels = names(cores_fill))
ggplot(dat, aes(x = stage, y = height, fill = stage)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(width = 0.1, alpha = 0.3) +
geom_text(data = letras2,
aes(x = stage, y = ymax + 2, label = .group),
size = 5) +
scale_fill_manual(values = cores_fill) +
labs(
x = "Estádio fenológico",
y = "Altura da planta (cm)",
title = "Altura das plantas em diferentes estádios fenológicos do algodoeiro"
) +
theme_minimal()
data(silva.cotton)
dat <- silva.cotton
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(nodes ~ defoliation_num + stage, data = dat)
summary(model)
# Remover linhas com NA apenas nas variáveis do modelo
modelo_df <- dat %>%
select(nodes, defoliation_num, stage) %>%
drop_na()
# Agora sim o modelo
modelo_interacao <- lm(nodes ~ defoliation_num * stage, data = modelo_df)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(modelo_interacao))
dat$defolha_fator <- as.factor(dat$defoliation_num)
leveneTest(nodes ~ stage * defolha_fator, data = dat)
# Verifique os níveis mantidos
levels(modelo_df$stage)
table(modelo_df$stage)
# Cores dos estágios
cores_fill <- c(
"blossom" = "#CC79A7",
"boll" = "#E69F00",
"bollopen" = "#56B4E9",
"flowerbud" = "#009E73",
"vegetative" = "#F0E442"
)
# Garantir os fatores com todos os níveis
modelo_df$stage <- factor(modelo_df$stage, levels = names(cores_fill))
# Criar tabela para predição
newdata <- expand.grid(
defoliation_num = seq(min(modelo_df$defoliation_num), max(modelo_df$defoliation_num), length.out = 100),
stage = levels(modelo_df$stage)
)
# Previsões
preds <- predict(modelo_interacao, newdata, interval = "confidence")
pred_df <- cbind(newdata, preds)
# Garantir tipos
pred_df$stage <- factor(pred_df$stage, levels = names(cores_fill))
# Gráfico
ggplot(modelo_df, aes(x = defoliation_num, y = nodes, color = stage)) +
geom_point(alpha = 0.5) +
geom_line(data = pred_df, aes(x = defoliation_num, y = fit, color = stage), linewidth = 1) +
geom_ribbon(data = pred_df, aes(x = defoliation_num, ymin = lwr, ymax = upr, fill = stage), alpha = 0.3, color = NA) +
scale_color_manual(values = cores_fill) +
scale_fill_manual(values = cores_fill) +
labs(
title = "Efeito da desfolha sobre o número de nós por estádio fenológico",
x = "Desfolha (%)",
y = "Número de nós",
color = "Estádio",
fill = "Estádio"
) +
theme_minimal()
data(silva.cotton)
dat <- silva.cotton
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(nodes ~ defoliation_num + stage, data = dat)
summary(model)
# Remover linhas com NA apenas nas variáveis do modelo
modelo_df <- dat %>%
select(nodes, defoliation_num, stage) %>%
drop_na()
# Agora sim o modelo
modelo_interacao <- lm(nodes ~ defoliation_num * stage, data = modelo_df)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(modelo_interacao))
dat$defolha_fator <- as.factor(dat$defoliation_num)
leveneTest(nodes ~ stage * defolha_fator, data = dat)
# Verifique os níveis mantidos
levels(modelo_df$stage)
table(modelo_df$stage)
# Paleta de cores para os estágios
cores_fill <- c(
"blossom"    = "#CC79A7",
"boll"       = "#E69F00",
"bollopen"   = "#56B4E9",
"flowerbud"  = "#009E73",
"vegetative" = "#F0E442"
)
# Garantir que os fatores estão com os níveis completos e corretos
modelo_df$stage <- factor(modelo_df$stage, levels = names(cores_fill))
# Criar tabela para predição
newdata <- expand.grid(
defoliation_num = seq(min(modelo_df$defoliation_num), max(modelo_df$defoliation_num), length.out = 100),
stage = levels(modelo_df$stage)
)
# Obter previsões com intervalo de confiança
preds <- predict(modelo_interacao, newdata, interval = "confidence")
pred_df <- cbind(newdata, preds)
# Garantir os mesmos níveis no dataframe de predição
pred_df$stage <- factor(pred_df$stage, levels = names(cores_fill))
# Gerar gráfico final
ggplot() +
geom_point(data = modelo_df, aes(x = defoliation_num, y = nodes, color = stage), alpha = 0.5) +
geom_line(data = pred_df, aes(x = defoliation_num, y = fit, color = stage), linewidth = 1) +
geom_ribbon(data = pred_df, aes(x = defoliation_num, ymin = lwr, ymax = upr, fill = stage),
alpha = 0.3, color = NA, inherit.aes = FALSE) +
scale_color_manual(values = cores_fill) +
scale_fill_manual(values = cores_fill) +
labs(
title = "Efeito da desfolha sobre o número de nós por estádio fenológico",
x = "Desfolha (%)",
y = "Número de nós",
color = "Estádio",
fill = "Estádio"
) +
theme_minimal()
# Cores dos estágios
cores_fill <- c(
"blossom" = "#CC79A7",
"boll" = "#E69F00",
"bollopen" = "#56B4E9",
"flowerbud" = "#009E73",
"vegetative" = "#F0E442"
)
# Garantir os fatores com todos os níveis
modelo_df$stage <- factor(modelo_df$stage, levels = names(cores_fill))
# Criar tabela para predição
newdata <- expand.grid(
defoliation_num = seq(min(modelo_df$defoliation_num), max(modelo_df$defoliation_num), length.out = 100),
stage = levels(modelo_df$stage)
)
# Previsões do modelo com intervalo de confiança
preds <- predict(modelo_interacao, newdata, interval = "confidence")
pred_df <- cbind(newdata, preds)
# Garantir fator para cores
pred_df$stage <- factor(pred_df$stage, levels = names(cores_fill))
# Gráfico com jitter nos pontos
ggplot() +
geom_jitter(data = modelo_df, aes(x = defoliation_num, y = nodes, color = stage),
width = 0.3, height = 0.15, alpha = 0.5, size = 2) +
geom_line(data = pred_df, aes(x = defoliation_num, y = fit, color = stage), linewidth = 1) +
geom_ribbon(data = pred_df, aes(x = defoliation_num, ymin = lwr, ymax = upr, fill = stage),
alpha = 0.3, color = NA) +
scale_color_manual(values = cores_fill) +
scale_fill_manual(values = cores_fill) +
labs(
title = "Efeito da desfolha sobre o número de nós por estádio fenológico",
x = "Desfolha (%)",
y = "Número de nós",
color = "Estádio",
fill = "Estádio"
) +
theme_minimal()
str(dat$defoliation)
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(height ~ defoliation_num + stage, data = dat)
summary(model)
modelo_interacao <- lm(height ~ defoliation_num * stage, data = dat)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(model))
leveneTest(height ~ stage * defoliation, data = dat)
leveneTest(height ~ stage * defoliation_num, data = dat)
library(janitor)
library(car)       # para teste de Levene
library(emmeans)   # para pós-hoc
library(multcompView) # para compact letter display no pós-hoc
library(multcomp)
library(agricolae)
library(tidyr)
library(agridat)
library(ggplot2)
library(dplyr)
data(silva.cotton)
dat <- silva.cotton
# ANOVA bifatorial (modelo aditivo com interação)
dat$defoliation <- as.factor(dat$defoliation)
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(height ~ defoliation_num + stage, data = dat)
summary(model)
modelo_interacao <- lm(height ~ defoliation_num * stage, data = dat)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(model))
leveneTest(height ~ stage * defoliation_num, data = dat)
data(silva.cotton)
dat <- silva.cotton
# ANOVA bifatorial (modelo aditivo com interação)
dat$defoliation <- as.factor(dat$defoliation)
model <- lm(height ~ defoliation_num + stage, data = dat)
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(height ~ defoliation_num + stage, data = dat)
summary(model)
modelo_interacao <- lm(height ~ defoliation_num * stage, data = dat)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(model))
dat$defoliation <- as.factor(dat$defoliation)
leveneTest(height ~ stage * defoliation, data = dat)
# Ajuste seu modelo sem interação
model <- lm(height ~ defoliation_num + stage, data = dat)
# Criar dados para predição
newdata <- expand.grid(
defoliation_num = seq(min(dat$defoliation_num), max(dat$defoliation_num), length.out = 100),
stage = levels(dat$stage)
)
# Extrair coeficientes do modelo
coef_model <- coef(model)
# Calcular predição manualmente (sem interação)
newdata$fit <- coef_model["(Intercept)"] +
coef_model["defoliation_num"] * newdata$defoliation_num +
ifelse(newdata$stage == levels(dat$stage)[1], 0,  # referência é o primeiro nível
coef_model[paste0("stage", newdata$stage)])
# Plotar pontos e linhas manuais
ggplot(dat, aes(x = defoliation_num, y = height, color = stage)) +
geom_point(alpha = 0.6) +
geom_line(data = newdata, aes(x = defoliation_num, y = fit, color = stage), size = 1) +
labs(
title = "Altura das plantas em função da desfolha e do estádio fenológico",
x = "Desfolha (%)",
y = "Altura das plantas (cm)",
color = "Estádio"
) +
theme_minimal()
data(silva.cotton)
dat <- silva.cotton
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(height ~ defoliation_num + stage, data = dat)
summary(model)
modelo_interacao <- lm(height ~ defoliation_num * stage, data = dat)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(model))
dat$defoliation <- as.factor(dat$defoliation)
leveneTest(height ~ stage * defoliation, data = dat)
# Ajuste seu modelo sem interação
model <- lm(height ~ defoliation_num + stage, data = dat)
# Criar dados para predição
newdata <- expand.grid(
defoliation_num = seq(min(dat$defoliation_num), max(dat$defoliation_num), length.out = 100),
stage = levels(dat$stage)
)
# Extrair coeficientes do modelo
coef_model <- coef(model)
# Calcular predição manualmente (sem interação)
newdata$fit <- coef_model["(Intercept)"] +
coef_model["defoliation_num"] * newdata$defoliation_num +
ifelse(newdata$stage == levels(dat$stage)[1], 0,  # referência é o primeiro nível
coef_model[paste0("stage", newdata$stage)])
# Plotar pontos e linhas manuais
ggplot(dat, aes(x = defoliation_num, y = height, color = stage)) +
geom_point(alpha = 0.6) +
geom_line(data = newdata, aes(x = defoliation_num, y = fit, color = stage), size = 1) +
labs(
title = "Altura das plantas em função da desfolha e do estádio fenológico",
x = "Desfolha (%)",
y = "Altura das plantas (cm)",
color = "Estádio"
) +
theme_minimal()
dat$stage <- factor(dat$stage, levels = names(cores_fill))
# Cores para estágios
cores_fill <- c(
"blossom" = "#CC79A7",
"boll" = "#E69F00",
"bollopen" = "#56B4E9",
"flowerbud" = "#009E73",
"vegetative" = "#F0E442"
)
dat$stage <- factor(dat$stage, levels = names(cores_fill))
# Criar dados para predição
newdata <- expand.grid(
defoliation_num = seq(min(dat$defoliation_num), max(dat$defoliation_num), length.out = 100),
stage = levels(dat$stage)
)
# Extrair coeficientes do modelo
coef_model <- coef(model)
# Calcular predição manualmente (sem interação)
newdata$fit <- coef_model["(Intercept)"] +
coef_model["defoliation_num"] * newdata$defoliation_num +
ifelse(newdata$stage == levels(dat$stage)[1], 0,
coef_model[paste0("stage", newdata$stage)])
# Plot
ggplot(dat, aes(x = defoliation_num, y = height, color = stage)) +
geom_point(alpha = 0.6) +
geom_line(data = newdata, aes(x = defoliation_num, y = fit, color = stage), size = 1) +
scale_color_manual(values = cores_fill) +
labs(
title = "Altura das plantas em função da desfolha e do estádio fenológico",
x = "Desfolha (%)",
y = "Altura das plantas (cm)",
color = "Estádio"
) +
theme_minimal()
data(silva.cotton)
dat <- silva.cotton
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(nodes ~ defoliation_num + stage, data = dat)
summary(model)
# Remover linhas com NA apenas nas variáveis do modelo
modelo_df <- dat %>%
select(nodes, defoliation_num, stage) %>%
drop_na()
# Agora sim o modelo
modelo_interacao <- lm(nodes ~ defoliation_num * stage, data = modelo_df)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(modelo_interacao))
dat$defolha_fator <- as.factor(dat$defoliation_num)
leveneTest(nodes ~ stage * defolha_fator, data = dat)
# Verifique os níveis mantidos
levels(modelo_df$stage)
table(modelo_df$stage)
# Cores dos estágios
cores_fill <- c(
"blossom" = "#CC79A7",
"boll" = "#E69F00",
"bollopen" = "#56B4E9",
"flowerbud" = "#009E73",
"vegetative" = "#F0E442"
)
# Garantir os fatores com todos os níveis
modelo_df$stage <- factor(modelo_df$stage, levels = names(cores_fill))
# Criar tabela para predição
newdata <- expand.grid(
defoliation_num = seq(min(modelo_df$defoliation_num), max(modelo_df$defoliation_num), length.out = 100),
stage = levels(modelo_df$stage)
)
# Previsões do modelo com intervalo de confiança
preds <- predict(modelo_interacao, newdata, interval = "confidence")
pred_df <- cbind(newdata, preds)
# Garantir fator para cores
pred_df$stage <- factor(pred_df$stage, levels = names(cores_fill))
# Gráfico com jitter nos pontos
ggplot() +
geom_jitter(data = modelo_df, aes(x = defoliation_num, y = nodes, color = stage),
width = 0.3, height = 0.15, alpha = 0.5, size = 2) +
geom_line(data = pred_df, aes(x = defoliation_num, y = fit, color = stage), linewidth = 1) +
geom_ribbon(data = pred_df, aes(x = defoliation_num, ymin = lwr, ymax = upr, fill = stage),
alpha = 0.3, color = NA) +
scale_color_manual(values = cores_fill) +
scale_fill_manual(values = cores_fill) +
labs(
title = "Efeito da desfolha sobre o número de nós por estádio fenológico",
x = "Desfolha (%)",
y = "Número de nós",
color = "Estádio",
fill = "Estádio"
) +
theme_minimal()
# Gráfico com jitter nos pontos
ggplot() +
geom_jitter(data = modelo_df, aes(x = defoliation_num, y = nodes, color = stage),
width = 0.3, height = 0.15, alpha = 0.5, size = 2) +
geom_line(data = pred_df, aes(x = defoliation_num, y = fit, color = stage), linewidth = 1) +
geom_ribbon(data = pred_df, aes(x = defoliation_num, ymin = lwr, ymax = upr, fill = stage),
alpha = 0.3, color = NA) +
scale_color_manual(values = cores_fill) +
scale_fill_manual(values = cores_fill) +
labs(
title = "Efeito da desfolha sobre o número de nós por estádio fenológico",
x = "Desfolha (%)",
y = "Número de nós",
color = "Estádio",
fill = "Estádio"
) +
theme_minimal()
data(silva.cotton)
dat <- silva.cotton
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(height ~ defoliation_num + stage, data = dat)
summary(model)
modelo_interacao <- lm(height ~ defoliation_num * stage, data = dat)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(model))
dat$defoliation <- as.factor(dat$defoliation)
leveneTest(height ~ stage * defoliation, data = dat)
# Cores para estágios
cores_fill <- c(
"blossom" = "#CC79A7",
"boll" = "#E69F00",
"bollopen" = "#56B4E9",
"flowerbud" = "#009E73",
"vegetative" = "#F0E442"
)
dat$stage <- factor(dat$stage, levels = names(cores_fill))
# Criar dados para predição
newdata <- expand.grid(
defoliation_num = seq(min(dat$defoliation_num), max(dat$defoliation_num), length.out = 100),
stage = levels(dat$stage)
)
# Extrair coeficientes do modelo
coef_model <- coef(model)
# Calcular predição manualmente (sem interação)
newdata$fit <- coef_model["(Intercept)"] +
coef_model["defoliation_num"] * newdata$defoliation_num +
ifelse(newdata$stage == levels(dat$stage)[1], 0,
coef_model[paste0("stage", newdata$stage)])
# Plot
ggplot(dat, aes(x = defoliation_num, y = height, color = stage)) +
geom_point(alpha = 0.6) +
geom_line(data = newdata, aes(x = defoliation_num, y = fit, color = stage), size = 1) +
scale_color_manual(values = cores_fill) +
labs(
title = "Altura das plantas em função da desfolha e do estádio fenológico",
x = "Desfolha (%)",
y = "Altura das plantas (cm)",
color = "Estádio"
) +
theme_minimal()
# Plot
ggplot(dat, aes(x = defoliation_num, y = height, color = stage)) +
geom_point(alpha = 0.6) +
geom_line(data = newdata, aes(x = defoliation_num, y = fit, color = stage), size = 1) +
scale_color_manual(values = cores_fill) +
labs(
title = "Altura das plantas em função da desfolha e do estádio fenológico",
x = "Desfolha (%)",
y = "Altura das plantas (cm)",
color = "Estádio"
) +
theme_minimal()
emmeans_stage <- emmeans(model, ~ stage)
letras2 <- cld(emmeans_stage, Letters = letters)
ymax <- max(dat$height, na.rm = TRUE)
ggplot(dat, aes(x = stage, y = height)) +
geom_boxplot(fill = "lightgreen", alpha = 0.6, outlier.shape = NA) +
geom_jitter(width = 0.1, alpha = 0.3) +
geom_text(data = letras2,
aes(x = stage, y = ymax + 2, label = .group),
size = 5) +
labs(
x = "Estádio fenológico",
y = "Altura da planta (cm)",
title = "Altura das plantas em diferentes estádios fenológicos do algodoeiro"
) +
theme_minimal()
data(silva.cotton)
dat <- silva.cotton
dat$defoliation_num <- as.numeric(as.character(dat$defoliation))
model <- lm(nodes ~ defoliation_num + stage, data = dat)
summary(model)
# Remover linhas com NA apenas nas variáveis do modelo
modelo_df <- dat %>%
select(nodes, defoliation_num, stage) %>%
drop_na()
# Agora sim o modelo
modelo_interacao <- lm(nodes ~ defoliation_num * stage, data = modelo_df)
summary(modelo_interacao)
anova(model, modelo_interacao)
shapiro.test(residuals(modelo_interacao))
dat$defolha_fator <- as.factor(dat$defoliation_num)
leveneTest(nodes ~ stage * defolha_fator, data = dat)
# Verifique os níveis mantidos
levels(modelo_df$stage)
table(modelo_df$stage)
# Cores dos estágios
cores_fill <- c(
"blossom" = "#CC79A7",
"boll" = "#E69F00",
"bollopen" = "#56B4E9",
"flowerbud" = "#009E73",
"vegetative" = "#F0E442"
)
# Garantir os fatores com todos os níveis
modelo_df$stage <- factor(modelo_df$stage, levels = names(cores_fill))
# Criar tabela para predição
newdata <- expand.grid(
defoliation_num = seq(min(modelo_df$defoliation_num), max(modelo_df$defoliation_num), length.out = 100),
stage = levels(modelo_df$stage)
)
# Previsões do modelo com intervalo de confiança
preds <- predict(modelo_interacao, newdata, interval = "confidence")
pred_df <- cbind(newdata, preds)
# Garantir fator para cores
pred_df$stage <- factor(pred_df$stage, levels = names(cores_fill))
# Gráfico com jitter nos pontos
ggplot() +
geom_jitter(data = modelo_df, aes(x = defoliation_num, y = nodes, color = stage),
width = 0.3, height = 0.15, alpha = 0.5, size = 2) +
geom_line(data = pred_df, aes(x = defoliation_num, y = fit, color = stage), linewidth = 1) +
geom_ribbon(data = pred_df, aes(x = defoliation_num, ymin = lwr, ymax = upr, fill = stage),
alpha = 0.3, color = NA) +
scale_color_manual(values = cores_fill) +
scale_fill_manual(values = cores_fill) +
labs(
title = "Efeito da desfolha sobre o número de nós por estádio fenológico",
x = "Desfolha (%)",
y = "Número de nós",
color = "Estádio",
fill = "Estádio"
) +
theme_minimal()
